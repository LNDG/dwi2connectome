#!/bin/bash
# file: advpreproc
# usage: advpreproc subj workdir ismosaic ncpus fullreverseseq ismultiband

# note: for only with acquisitions with reverse sequnce - i.e. base subject directory must contain rawdataAP.mif and its reverse sequence rawdataPA.mif

subj=$1
WORKDIR=$2
#ismosiac=$3
#fullreverseseq=$4
#ismultiband=$5

mkdir -p $WORKDIR/Diff/$subj/preproc

rsync *rawdata* $WORKDIR/Diff/$subj/preproc

rsync T1.nii $WORKDIR/Diff/$subj/preproc

cd $WORKDIR/Diff/$subj/preproc

#check for extra b0 volume

mrinfo rawdataAP.mif -dwgrad > rawencoding.b

nvols=$(wc -l rawencoding.b | awk -F " " '{print $1}')

if [ $nvols == "103" ]; then

	mrconvert rawdataAP.mif rawdataAP.nii -force -nthreads 8

	adjvols=$(expr $nvols - 1)

	fslroi rawdataAP.nii rawdataAPrem 1 $adjvols

	sed '1d' rawencoding.b > rawencodingrem.b

	mrconvert rawdataAPrem.nii.gz rawdataAPrem.mif -nthreads 8 -force -grad rawencodingrem.b -stridess +1,2,3,4

	mv rawdataAPrem.mif rawdataAP.mif

	mv rawencodingrem.b rawencoding.b

fi

#embed phase encoding

mrconvert rawdataAP.mif rawdataAPsetPE.mif -set_property PhaseEncoding j- -nthreads 8 -force

mrconvert rawdataPA.mif rawdataPAsetPE.mif -set_property PhaseEncoding j -nthreads 8 -force

mv rawdataPAsetPE.mif rawdataPA.mif
mv rawdataAPsetPE.mif rawdataAP.mif

#Denoise

dwidenoise rawdataAP.mif rawdataAPdn.mif -force -nthreads 8
dwidenoise rawdataPA.mif rawdataPAdn.mif -force -nthreads 8

mrconvert rawdataAPdn.mif rawdataAPdnstr.mif -stridess +1,2,3,4 -force -nthreads 8
mrconvert rawdataAPdnstr.mif  rawdataAPdn.mif  -force -nthreads 8

mrconvert rawdataPAdn.mif rawdataPAdnstr.mif -stridess +1,2,3,4 -force -nthreads 8
mrconvert rawdataPAdnstr.mif  rawdataPAdn.mif -stridess +1,2,3,4 -force -nthreads 8

rm rawdataAPdnstr.mif
rm rawdataPAdnstr.mif 

#Generate a b0 base image for each phase-encoding direction

mrconvert rawdataAPdn.mif b0AP.mif -coord 3 0 -force -nthreads 8
mrconvert rawdataPAdn.mif b0PA.mif -coord 3 0 -force -nthreads 8

#Preprocessing steps including eddy correction & bias correction

dwiextract rawdataAPdn.mif APb0s.mif -nthreads 8 -bzero -force
mrconvert APb0s.mif AP7b0s.mif -coord 3 0,1,3,5,7,9,10 -force -nthreads 8

#dwiextract rawdataPAdn.mif rawdatPAdnrem.mif -bzero -force -nthreads 8 
#mv rawdataPAdnrem.mif rawdataPAdn.mif
mrconvert rawdataPAdn.mif rawdataPAdnrem.mif -coord 3 0,1,2,3,4,5,6 -force -nthreads 8

mv rawdataPAdnrem.mif rawdataPAdn.mif

mrcat AP7b0s.mif rawdataPAdn.mif allb0s.mif -axis 3 -force -nthreads 8

#dwipreproc_cust -rpe_pair AP7b0s.mif  rawdataPAdn.mif -export_grad_mrtrix adjencoding.b AP rawdataAPdn.mif eddycorr.mif -nthreads 8 -verbose -force

dwipreproc -rpe_pair -se_epi allb0s.mif -align_seepi -pe_dir AP -export_grad_mrtrix adjencoding.b rawdataAPdn.mif eddycorr.mif -eddy_options " --repol " -nthreads 8 -force -eddyqc_all dwipreproc

#extract motion parameters
#preprocdir=$(find * -maxdepth 0 -name "*dwipreproc*" -type d)
#awk -F " " '{print $2}' ${preprocdir}/dwi_post_eddy.eddy_movement_rms > FD.txt
#awk '{ total += $1 } END { print total/NR }' FD.txt > meanFD.txt

dwiextract eddycorr.mif -nthreads 8 -bzero - | mrmath -axis 3 - mean eddymeanb0.nii -nthreads 8 -force

bet2 eddymeanb0.nii eddyb0brainfsl -m -f 0.15



#bet2 eddymeanb0.nii eddymeanb0bet -m -f 0.15

dwibiascorrect -mask eddyb0brainfsl_mask.nii.gz -fsl eddycorr.mif biascorr.mif -nthreads 8 -force


#create optimal mask

#dwi2mask biascorr.mif biasmaskMR.nii -force -nthreads 8

#fslmaths eddyb0brainfsl_mask.nii.gz -mas biasmaskMR.nii iterbrainmask

#gunzip iterbrainmask.nii.gz -f

#dwishellmath biascorr.mif mean meanshell.mif -force -nthreads 8


#Create tensor and FA images

dwiextract biascorr.mif -nthreads 8 -bzero - | mrmath -axis 3 - mean biasmeanb0.nii -nthreads 8 -force

bet2 biasmeanb0.nii biasmeanb0bet -f 0.2 -m

#fslmaths biasmeanb0.nii -mask iterbrainmask.nii biasmeanb0bet

#gunzip biasmeanb0bet.nii.gz -f 

dwi2tensor biascorr.mif dt.nii -mask biasmeanb0bet_mask.nii.gz -nthreads 8 -force

tensor2metric dt.nii -fa fa.nii -nthreads 8 -force
