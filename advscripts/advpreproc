#!/bin/bash
# file: advpreproc
# usage: advpreproc subj workdir ismosaic ncpus fullreverseseq ismultiband

# note: for only with acquisitions with reverse sequnce - i.e. base subject directory must contain rawdataAP.mif and its reverse sequence rawdataPA.mif

subj=$1
WORKDIR=$2
ismultiband=$3

mkdir -p $WORKDIR/Diff/$subj/preproc 

rsync *rawdata* $WORKDIR/Diff/$subj/preproc

rsync T1.nii $WORKDIR/Diff/$subj/preproc

cd $WORKDIR/Diff/$subj/preproc

#Extract encoding

mrinfo rawdataAP.mif -export_grad_mrtrix rawencoding.b -force
mrinfo rawdataPA.mif -export_grad_mrtrix rawrevencoding.b -force

#if [ $ismosiac = 1 ];
#then

#	mrconvert rawdataAP.mif rawdataAP.nii -force -nthreads 8

#	nvols=$(fslnvols rawdataAP.nii)
#	adjvols=$(expr $nvols - 1)

#	fslroi rawdataAP.nii rawdataAPrem 1 $adjvols

#	sed '1d' rawencoding.b > rawencodingrem.b
#	mrconvert rawdataAPrem.nii.gz rawdataAPrem.mif -force -grad rawencodingrem.b -strides +1,2,3,4 -nthreads 8

#	mv rawdataAPrem.mif rawdataAP.mif

#fi

#if [ $ismosiac = 1 ] && [ $fullreverseseq = 1 ]; then



#mrconvert rawdataPA.mif rawdataPA.nii -json_export json_rawdataPA.json -force -nthreads 8
#nvols=$(fslnvols rawdataPA.nii)
#fslroi rawdataPA.nii rawdataPArem 1 $nvols
#sed '1d' rawrevencoding.b > rawrevencodingrem.b
#mrconvert rawdataPArem.nii.gz rawdataPArem.mif -force -grad rawrevencodingrem.b -strides +1,2,3,4 -nthreads 8
#mv rawdataPArem.mif rawdataPA.mif
	
#else
	
dwiextract rawdataPA.mif -bzero rawdataPArem.mif -force -nthreads 8
#mrconvert rawdataPArem.mif rawdataPA.mif -json_import json_rawdataPA.json -nthreads 8 -force
#rm rawdataPArem.mif	

#fi

#Denoise

dwidenoise rawdataAP.mif rawdataAPdn.mif -force -nthreads 8
dwidenoise rawdataPArem.mif rawdataPAdn.mif -force -nthreads 8

mrconvert rawdataAPdn.mif rawdataAPdnstr.mif -strides +1,2,3,4 -force -nthreads 8
mrconvert rawdataAPdnstr.mif  rawdataAPdn.mif  -force -nthreads 8

mrconvert rawdataPAdn.mif rawdataPAdnstr.mif -strides +1,2,3,4 -force -nthreads 8
mrconvert rawdataPAdnstr.mif  rawdataPAdn.mif -strides +1,2,3,4 -force -nthreads 8

rm rawdataAPdnstr.mif
rm rawdataPAdnstr.mif 

#Generate a b0 base image for each phase-encoding direction

mrconvert rawdataAPdn.mif b0AP.mif -coord 3 0 -force -nthreads 8
mrconvert rawdataPAdn.mif b0PA.mif -coord 3 0 -force -nthreads 8

#Preprocessing steps including eddy correction & bias correction

dwiextract rawdataAPdn.mif APb0s.mif -bzero -force -nthreads 8

if ([ $ismultiband = 1 ]); then

        mrcat APb0s.mif rawdataPAdn.mif allb0s.mif -axis 3 -force -nthreads 8
	echo "Preprocessing command...:dwipreproc -rpe_pair -se_epi allb0s.mif -pe_dir AP -export_grad_mrtrix adjencoding.b rawdataAPdn.mif eddycorr.mif -eddy_options " --repol --data_is_shelled --mb=2 --ol_type=both " -nthreads 8 -force -tempdir . -nocleanup"
	dwipreproc -rpe_pair -se_epi allb0s.mif -pe_dir AP -export_grad_mrtrix adjencoding.b rawdataAPdn.mif eddycorr.mif -eddy_options " --repol --data_is_shelled --mb=2 --ol_type=both " -nthreads 8 -force -tempdir . -nocleanup

#elif ([ $ismultiband = 1 ] && [ $fullreverseseq = 1 ]); then
        
	#mrcat rawdataAPdn.mif rawdataPAdn.mif allDWIs.mif -axis 3 -force -nthreads 8
	#echo "Preprocessing command...:dwipreproc -rpe_all -export_grad_mrtrix adjencoding.b -pe_dir AP allDWIs.mif eddycorr.mif -eddy_options " --repol --data_is_shelled --mb=2 --ol_type=both " -nthreads 8 -force -tempdir . -nocleanup"
	#dwipreproc -rpe_all -export_grad_mrtrix adjencoding.b -pe_dir AP allDWIs.mif eddycorr.mif -eddy_options " --repol --data_is_shelled --mb=2 --ol_type=both " -nthreads 8 -force -tempdir . -nocleanup

else

	mrcat APb0s.mif rawdataPAdn.mif allb0s.mif -axis 3 -force -nthreads 8
	echo "Preprocessing command...:dwipreproc -rpe_pair -se_epi allb0s.mif -pe_dir AP -export_grad_mrtrix adjencoding.b rawdataAPdn.mif eddycorr.mif -eddy_options " --repol --data_is_shelled " -nthreads 8 -force -tempdir . -nocleanup"
	dwipreproc -rpe_pair -se_epi allb0s.mif -pe_dir AP -export_grad_mrtrix adjencoding.b rawdataAPdn.mif eddycorr.mif -eddy_options " --repol --data_is_shelled " -nthreads 8 -force -tempdir . -nocleanup

fi

dwiextract eddycorr.mif -nthreads 8 -bzero - | mrmath -axis 3 - mean eddymeanb0.nii -force -nthreads 8

bet2 eddymeanb0.nii eddyb0brainfsl -m -f 0.15

#dwi2mask eddycorr.mif eddymaskMR.nii -force -nthreads 8


#bias correction

dwibiascorrect -mask eddyb0brainfsl_mask.nii.gz -fsl eddycorr.mif biascorr.mif -nthreads 8 -force


#create optimal mask

dwi2mask biascorr.mif biasmaskMR.nii -force -nthreads 8

fslmaths eddyb0brainfsl_mask -mas biasmaskMR.nii iterbrainmask

gunzip iterbrainmask.nii.gz -f

#dwishellmath biascorr.mif mean meanshell.mif -nthreads 8 -force


#Create tensor and FA images

dwiextract biascorr.mif -nthreads 8 -bzero - | mrmath -axis 3 - mean biasmeanb0.nii -force -nthreads 8

fslmaths biasmeanb0.nii -mas iterbrainmask.nii biasmeanb0masked

#gunzip -f biasmeanb0bet.nii.gz

#add further bet2 option so later pipeline doesn't break!

bet2 biasmeanb0masked biasmeanb0bet -f 0.10 -m 

dwi2tensor biascorr.mif dt.nii -mask iterbrainmask.nii -nthreads 8 -force

tensor2metric dt.nii -fa fa.nii -nthreads 8 -force
